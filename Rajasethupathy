Step 1: Install Required Libraries!pip install -q seaborn scikit-learn pandas matplotlib #
 Step 2: Import Librariesimport pandas as pdimport numpy as npimport seaborn as snsimport matplotlib.pyplot as pltfrom sklearn.model_selection import train_test_splitfrom sklearn.preprocessing import StandardScaler, LabelEncoderfrom sklearn.metrics import classification_report, confusion_matrixfrom tensorflow.keras.models import Sequentialfrom tensorflow.keras.layers import Dense, Dropout, BatchNormalizationfrom tensorflow.keras.optimizers import Adam #
 Step 3: Load the Datasetfile_path = '/content/dataset.csv'your Colab sessiondf = pd.read_csv(file_path) # Make sure to upload dataset.csv to #
 Step 4: Preprocess the Data# Encode categorical labels if neededif df['risk level'].dtype == 'object': le = LabelEncoder()df['risk level'] = le.fit_transform(df['risk level']) # Split features and labelX = df.drop('risk level', axis=1)y = df['risk level'] # Normalize featuresscaler = StandardScaler()#X_scaled = scaler.fit_transform(X) # Split into training and testingX_train, X_test, y_train, y_test = train_test_split(X_scaled, y,test_size=0.2, random_state=42) # 
Step 5: Build Deep Learning Modelmodel = Sequential([ Dense(64, activation='relu', input_shape=(X_train.shape[1],)),BatchNormalization(),Dropout(0.5), 
 Dense(32, activation='relu'),Dropout(0.3),Dense(len(np.unique(y)), activation='softmax') # Use softmax for multi-class classification ]) # Step 6: Compile the Model model.compile(optimizer=Adam(learning_rate=0.001), loss='sparse_categorical_crossentropy',metrics=['accuracy']) # Step 7: Train the Model history = model.fit(X_train, y_train, epochs=20, batch_size=32, validation_split=0.1) # Step 8: Evaluate the Model y_pred = np.argmax(model.predict(X_test), axis=1) print("\nClassification Report:\n", classification_report(y_test, y_pred)) # Step 9: Plot Confusion Matrix cm = confusion_matrix(y_test, y_pred) plt.figure(figsize=(8, 6)) sns.heatmap(cm, annot=True, fmt='d', cmap='Blues') plt.xlabel("Predicted") plt.ylabel("Actual") plt.title("Confusion Matrix - Risk Level Prediction") plt.show() 
